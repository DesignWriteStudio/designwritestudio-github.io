author: inmysocks
core-version: >=5.0.8
created: 20171204201450816
dependents: 
description: Some basic math operations for TiddlyWiki
modified: 20171204201450816
plugin-type: plugin
source: https://github.com/inmysocks/TW5-MathyThing
title: $:/plugins/inmysocks/MathyThing
type: application/json
version: 0.2.1

{
    "tiddlers": {
        "ActionIncrementWidget": {
            "caption": "action-increment",
            "inc_field1": "0",
            "inc_field2": "pre-00000",
            "tags": "Widgets ActionWidgets",
            "title": "ActionIncrementWidget",
            "type": "text/vnd.tiddlywiki",
            "text": "! Introduction\n\nThe ''action-increment'' widget is an [[action widget|ActionWidgets]] that increments a value in a specified field of a tiddler. ActionWidgets are used within triggering widgets such as the ButtonWidget.\n\n! Content and Attributes\n\nThe ''action-increment'' widget is invisible. Any content within it is ignored.\n\n|!Attribute |!Description |\n|$tiddler |The title of the tiddler with the field to be incremented (if not provided defaults to the [[WidgetVariable: currentTiddler]] |\n|$field |Name of a field to increment (if not provided defaults to `inc_field`) |\n|$increment |The increment amount, this can be negative (if not provided defaults to 1) |\n|$length |(optional) The minimum length of the numeric output, if the output would be shorter than this value zero padding is used. |\n|$prefix |(optional) The prefix to append to the output. |\n|$initial |(optional) The inital value assumed if the field doesn't exist (if none is given 0 is assumed) |\n\n! Examples\n\nHere is an example of a button that increments the field `inc_field1` by 1 each time it is pressed.\n\n<$macrocall $name='wikitext-example-without-html'\nsrc='<$button>\n<$action-increment $field=inc_field1/>\nIncrement\n</$button>\nCurrent Value: {{!!inc_field1}}'/>\n\nHere is an example of a button that increments a value that uses a prefix and minimum length\n\n<$macrocall $name='wikitext-example-without-html'\nsrc='<$button>\n<$action-increment $field=inc_field2 $length=5 $prefix=\"pre-\"/>\nIncrement\n</$button>\nCurrent Value: {{!!inc_field2}}'/>\n\n"
        },
        "$:/plugins/inmysocks/MathyThing/action-increment.js": {
            "text": "/*\\\ntitle: $:/plugins/inmysocks/MathyThing/action-increment.js\ntype: application/javascript\nmodule-type: widget\n\nAction widget that increments a number in a field.\n\n\\*/\n\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar IncrementWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nIncrementWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nIncrementWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nIncrementWidget.prototype.execute = function() {\n\tthis.actionTiddler = this.getAttribute(\"$tiddler\",this.getVariable(\"currentTiddler\"));\n\tthis.actionField = this.getAttribute(\"$field\",\"inc_field\");\n\tthis.actionIndex = this.getAttribute(\"$index\");\n\tthis.padLength = this.getAttribute(\"$length\",\"0\");\n\tthis.prefixValue = this.getAttribute(\"$prefix\")\n\tthis.initialValue = this.getAttribute(\"$initial\",\"0\")\n\n\tvar incVal = this.getAttribute(\"$increment\",1);\n\tvar tiddler = this.wiki.getTiddler(this.actionTiddler);\n\tvar fieldString = tiddler.getFieldString(this.actionField);\n\n\t//If there is no value in the field create the initial value, with a prefix and zero padding if needed.\n\tif(fieldString) {\n\t} else if(this.prefixValue) {\n\t\tif(this.padLength) {\n\t\t\tfieldString = this.prefixValue+$tw.utils.pad(this.initialValue,this.padLength);\n\t\t} else {\n\t\t\tfieldString = this.prefixValue+this.initialValue;\n\t\t}\n\t} else if(this.padLength) {\n\t\t\tfieldString = $tw.utils.pad(this.initialValue,this.padLength);\n\t} else {\n\t\t\tfieldString = this.initialValue;\n\t}\n\t\n\t//Get the current numeric value in the field by removing the prefix if one is given.\n\tif(this.prefixValue) {\n\t\tvar currentValue = fieldString.slice(this.prefixValue.length,fieldString.length);\n\t} else {\n\t\tvar currentValue = fieldString;\n\t}\n\n\t//If either the existing value or the increment value are not numbers leave the field alone, otherwise increment the value.\n\tif(!isNaN(parseFloat(currentValue)) && isFinite(currentValue) && !isNaN(parseFloat(incVal)) && isFinite(incVal)) { \n\t\tvar output = Number(currentValue) + Number(incVal);\n\t\tif(this.padLength) {\n\t\t\tthis.actionValue = $tw.utils.pad(output,this.padLength)\n\t\t} else {\n\t\t\tthis.actionValue = output;\n\t\t} \n\t\tif(this.prefixValue) {\n\t\t\tthis.actionValue = String(this.prefixValue)+String(this.actionValue);\n\t\t}\n\t} else {\n\t\tthis.actionValue = String(currentValue);\n\t}\n};\n\n/*\nRefresh the widget by ensuring our attributes are up to date\n*/\nIncrementWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes[\"$tiddler\"] || changedAttributes[\"$field\"] || changedAttributes[\"$index\"] || changedAttributes[\"$increment\"] || changedAttributes[\"$length\"]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nIncrementWidget.prototype.invokeAction = function(triggeringWidget,event) {\n\tif(typeof this.actionValue === \"string\") {\n\t\tthis.wiki.setText(this.actionTiddler,this.actionField,this.actionIndex,this.actionValue);\t\t\n\t}\n\treturn true; // Action was invoked\n};\n\nexports[\"action-increment\"] = IncrementWidget;\n\n})();",
            "title": "$:/plugins/inmysocks/MathyThing/action-increment.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/inymsocks/MathyThing/action-prodfield.js": {
            "text": "/*\\\ntitle: $:/plugins/inymsocks/MathyThing/action-prodfield.js\ntype: application/javascript\nmodule-type: widget\n\nMultiply the values in a specified field and store the result in another field\n\n<$prodfield filter='[tag[prod]]' prodfield='prod_field' storefield='store_field'/>\n\nThis is an edited version of the list widget from TiddlyWiki5\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ActionProdFieldWidget = function(parseTreeNode,options) {\n\t// Main initialisation inherited from widget.js\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nActionProdFieldWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nActionProdFieldWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nActionProdFieldWidget.prototype.execute = function() {\n\t// Get attributes\n\tthis.actionTiddler = this.getAttribute(\"$tiddler\",this.getVariable(\"currentTiddler\"));\n\tthis.prodField = this.getAttribute(\"$prodfield\");\n\tthis.storeField = this.getAttribute(\"$storefield\",\"store_field\");\n\tthis.storeIndex = this.getAttribute(\"$index\");\n\tthis.defaultValue = this.getAttribute(\"$defaultvalue\",0);\n\t// Compose the list elements\n\tthis.list = this.getTiddlerList();\n\t// Get current value\n\tthis.storetiddler = this.wiki.getTiddler(this.actionTiddler);\n\tvar currentState = this.storetiddler.getFieldString(this.storeField);\n\t// Check for an empty list, if the list isn't empty compute the product\n\tif(this.list.length === 0) {\n\t\toutput = this.defaultValue; //return the default value when there is nothing to product, if it isn't set than return 0\n\t} else {\n\t\tvar output = 1;\n\t\tfor (var i = 0; i < this.list.length; i++) {\n\t\t\tvar tidtitle = this.list[i];\n\t\t\tvar tiddler = this.wiki.getTiddler(tidtitle);\n\t\t\t// check to make sure that the field contains a number before using it in the product\n\t\t\tif ( !isNaN(parseFloat(tiddler.getFieldString(this.prodField))) && isFinite(tiddler.getFieldString(this.prodField)) ) {\n\t\t\t\toutput = output * Number(tiddler.getFieldString(this.prodField));\n\t\t\t}\n\t\t}\n\t}\n        // If the product has changed then write to the field\n\tthis.output = String(output);\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nActionProdFieldWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tvar output = 1;\n\tthis.list = this.getTiddlerList();\n\tfor (var i = 0; i < this.list.length; i++) {\n\t\tvar tidtitle = this.list[i];\n\t\tvar tiddler = this.wiki.getTiddler(tidtitle);\n\t\tif ( !isNaN(parseFloat(tiddler.getFieldString(this.prodField))) && isFinite(tiddler.getFieldString(this.prodField)) ) {\n\t  \t\toutput = output * Number(tiddler.getFieldString(this.prodField));\n\t\t}\n\t}\n\tthis.storetiddler = this.wiki.getTiddler(this.actionTiddler);\n\t// Completely rerender if any of our attributes have changed\n\tif (String(output) != String(this.storetiddler.getFieldString(this.storeField))) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else if(this.stateTitle && changedTiddlers[this.stateTitle]) {\n\t\tthis.readState();\n\t\treturn true;\n\t}\n\treturn false;\n};\n\nActionProdFieldWidget.prototype.getTiddlerList = function() {\n\tvar defaultFilter = \"[!is[system]is[system]]\"; // this will always return an empty list and is always valid, so default behavior is to return an empty list\n\treturn this.wiki.filterTiddlers(this.getAttribute(\"$filter\",defaultFilter),this);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nActionProdFieldWidget.prototype.invokeAction = function(triggeringWidget,event) {\n\tif (this.output === String(this.storetiddler.getFieldString(this.storeField))) {\n\t} else {\n\t\tthis.wiki.setText(this.actionTiddler,this.storeField,this.storeIndex,this.output);\n\t}\n\treturn true; // Action was invoked\n};\n\nexports[\"action-prodfield\"] = ActionProdFieldWidget;\n\n})();\n",
            "title": "$:/plugins/inymsocks/MathyThing/action-prodfield.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/inymsocks/MathyThing/action-prodfield2.js": {
            "text": "/*\\\ntitle: $:/plugins/inymsocks/MathyThing/action-prodfield2.js\ntype: application/javascript\nmodule-type: widget\n\nMultiply the values in two specified fields and store the result in another field\n\n<$prodfield2 filter='[tag[prod]]' prodfield='prod_field' prodfield2='prod_field2' storefield='store_field'/>\n\nThis is an edited version of the list widget from TiddlyWiki5\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ActionProdFieldWidget2 = function(parseTreeNode,options) {\n\t// Main initialisation inherited from widget.js\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nActionProdFieldWidget2.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nActionProdFieldWidget2.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nActionProdFieldWidget2.prototype.execute = function() {\n\t// Get attributes\n\tthis.actionTiddler = this.getAttribute(\"$tiddler\",0);\n\tthis.prodField = this.getAttribute(\"$prodfield\");\n\tthis.prodField2 = this.getAttribute(\"$prodfield2\");\n\tthis.storeField = this.getAttribute(\"$storefield\",\"store_field\");\n\tthis.storeIndex = this.getAttribute(\"$index\");\n\tthis.defaultValue = this.getAttribute(\"$defaultvalue\",0);\n\t// Compose the list elements\n\tthis.list = this.getTiddlerList();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nActionProdFieldWidget2.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tthis.list = this.getTiddlerList();\n\tfor (var i = 0; i < this.list.length; i++) {\n\t\tvar output = 1;\n\t\tvar tidtitle = this.list[i];\n\t\tvar tiddler = this.wiki.getTiddler(tidtitle);\n\t\tif ( !isNaN(parseFloat(tiddler.getFieldString(this.prodField))) && isFinite(tiddler.getFieldString(this.prodField)) && !isNaN(parseFloat(tiddler.getFieldString(this.prodField2))) && isFinite(tiddler.getFieldString(this.prodField2)) ) {\n\t  \t\toutput = Number(tiddler.getFieldString(this.prodField)) * Number(tiddler.getFieldString(this.prodField2));\n\t\t}\n\t\t// Completely rerender if any of our attributes have changed\n\t\tif ( this.actionTiddler === 0 ) {\n\t\t\tif (String(output) != String(tiddler.getFieldString(this.storeField))) {\n\t\t\t\tthis.refreshSelf();\n\t\t\t\treturn true;\n\t\t\t} else if(this.stateTitle && changedTiddlers[this.stateTitle]) {\n\t\t\t\tthis.readState();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tvar tiddler2 = this.wiki.getTiddler(this.actionTiddler);\n\t\t\tif (String(output) != String(tiddler2.getFieldString(this.storeField))) {\n\t\t\t\tthis.refreshSelf();\n\t\t\t\treturn true;\n\t\t\t} else if(this.stateTitle && changedTiddlers[this.stateTitle]) {\n\t\t\t\tthis.readState();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\nActionProdFieldWidget2.prototype.getTiddlerList = function() {\n\tvar defaultFilter = \"[!is[system]is[system]]\"; // this will always return an empty list and is always valid, so default behavior is to return an empty list\n\treturn this.wiki.filterTiddlers(this.getAttribute(\"$filter\",defaultFilter),this);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nActionProdFieldWidget2.prototype.invokeAction = function(triggeringWidget,event) {\n\t// Check for an empty list, if the list isn't empty compute the product\n\tif(this.list.length === 0) {\n\t\toutput = this.defaultValue; //return the default value when there is nothing to product, if it isn't set than return 0\n\t} else {\n\t\tfor (var i = 0; i < this.list.length; i++) {\n\t\t\tvar output = 1;\n\t\t\tvar tidtitle = this.list[i];\n\t\t\tvar tiddler = this.wiki.getTiddler(tidtitle);\n\t\t\t// check to make sure that the field contains a number before using it in the product\n\t\t\tif ( !isNaN(parseFloat(tiddler.getFieldString(this.prodField))) && isFinite(tiddler.getFieldString(this.prodField)) && !isNaN(parseFloat(tiddler.getFieldString(this.prodField2))) && isFinite(tiddler.getFieldString(this.prodField2)) ) {\n\t\t\t\toutput = Number(tiddler.getFieldString(this.prodField)) * Number(tiddler.getFieldString(this.prodField2));\n\t\t\t}\n\t\t\t // If the product has changed then write to the field\n\t\t\tthis.output = String(output);\n\t\t\tif ( this.actionTiddler === 0 ) {\n\t\t\t\tif (this.output === String(tiddler.getFieldString(this.storeField))) {\n\t\t\t\t} else {\n\t\t\t\t\tthis.wiki.setText(tidtitle,this.storeField,this.storeIndex,this.output);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar tiddler2 = this.wiki.getTiddler(this.actionTiddler);\n\t\t\t\tif (this.output === String(tiddler2.getFieldString(this.storeField))) {\n\t\t\t\t} else {\n\t\t\t\t\tthis.wiki.setText(this.actionTiddler,this.storeField,this.storeIndex,this.output);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true; // Action was invoked\n};\n\nexports[\"action-prodfield2\"] = ActionProdFieldWidget2;\n\n})();\n",
            "title": "$:/plugins/inymsocks/MathyThing/action-prodfield2.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/inmysocks/MathyThing/action-storecount.js": {
            "text": "/*\\\ntitle: $:/plugins/inmysocks/MathyThing/action-storecount.js\ntype: application/javascript\nmodule-type: widget\n\nCount widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar MyCountWidget = function(parseTreeNode,options) {\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nMyCountWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nMyCountWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nMyCountWidget.prototype.execute = function() {\n\tthis.actionTiddler = this.getAttribute(\"$tiddler\",this.getVariable(\"currentTiddler\"));\n\tthis.actionField = this.getAttribute(\"$field\",\"store_field\");\n\tthis.actionIndex = this.getAttribute(\"$index\");\n\tthis.filter = this.getAttribute(\"$filter\");\n\tthis.defaultVal = this.getAttribute(\"$default\",0);\n\t\n\t// Execute the filter\n\tif(this.filter) {\n\t\tthis.currentCount = this.wiki.filterTiddlers(this.filter,this).length;\n\t} else {\n\t\tthis.currentCount = this.defaultVal;\n\t}\n\tthis.actionValue = this.currentCount.toString();\n};\n\n/*\nRefresh the widget by ensuring our attributes are up to date\n*/\nMyCountWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tif(changedAttributes[\"$tiddler\"] || changedAttributes[\"$field\"] || changedAttributes[\"$index\"] || changedAttributes[\"$lower\"] || changedAttributes[\"$upper\"] || changedAttributes[\"$step\"]) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t}\n\treturn this.refreshChildren(changedTiddlers);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nMyCountWidget.prototype.invokeAction = function(triggeringWidget,event) {\n\tvar self = this;\n\tif(typeof this.actionValue === \"string\") {\n\t\tthis.wiki.setText(this.actionTiddler,this.actionField,this.actionIndex,this.actionValue);\t\t\n\t}\n\treturn true; // Action was invoked\n};\n\nexports[\"action-storecount\"] = MyCountWidget;\n\n})();",
            "title": "$:/plugins/inmysocks/MathyThing/action-storecount.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/inymsocks/MathyThing/action-sumfield.js": {
            "text": "/*\\\ntitle: $:/plugins/inymsocks/MathyThing/action-sumfield.js\ntype: application/javascript\nmodule-type: widget\n\nSum the values in a specified field and store the result in another field\n\n<$sumfield filter='[tag[sum]]' sumfield='sum_field' storefield='store_field'/>\n\nThis is an edited version of the list widget from TiddlyWiki5\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ActionSumFieldWidget = function(parseTreeNode,options) {\n\t// Main initialisation inherited from widget.js\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nActionSumFieldWidget.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nActionSumFieldWidget.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nActionSumFieldWidget.prototype.execute = function() {\n\t// Get attributes\n\tthis.actionTiddler = this.getAttribute(\"$tiddler\",this.getVariable(\"currentTiddler\"));\n\tthis.sumField = this.getAttribute(\"$sumfield\");\n\tthis.storeField = this.getAttribute(\"$storefield\",\"store_field\");\n\tthis.storeIndex = this.getAttribute(\"$index\");\n\tthis.defaultValue = this.getAttribute(\"$defaultvalue\",0);\n\t// Compose the list elements\n\tthis.list = this.getTiddlerList();\n\t// Get current value\n\tthis.storetiddler = this.wiki.getTiddler(this.actionTiddler);\n\tvar currentState = this.storetiddler.getFieldString(this.storeField);\n\t// Check for an empty list, if the list isn't empty compute the sum\n\tif(this.list.length === 0) {\n\t  output = this.defaultValue; //return the default value when there is nothing to sum, if it isn't set than return 0\n\t} else {\n\t  var output = 0;\n\t  for (var i = 0; i < this.list.length; i++) {\n\t    var tidtitle = this.list[i];\n\t    var tiddler = this.wiki.getTiddler(tidtitle);\n\t    if ( !isNaN(parseFloat(tiddler.getFieldString(this.sumField))) && isFinite(tiddler.getFieldString(this.sumField)) ) {\n\t    \toutput = output + Number(tiddler.getFieldString(this.sumField));\n\t\t}\n\t  }\n\t}\n        // If the sum has changed then write to the field\n\tthis.output = String(output);\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nActionSumFieldWidget.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tvar output = 0;\n\tthis.list = this.getTiddlerList();\n\tfor (var i = 0; i < this.list.length; i++) {\n\t  var tidtitle = this.list[i];\n\t  var tiddler = this.wiki.getTiddler(tidtitle);\n\t  if ( !isNaN(parseFloat(tiddler.getFieldString(this.sumField))) && isFinite(tiddler.getFieldString(this.sumField)) ) {\n\t  \toutput = output + Number(tiddler.getFieldString(this.sumField));\n\t  }\n\t}\n\tthis.storetiddler = this.wiki.getTiddler(this.actionTiddler);\n\t// Completely rerender if any of our attributes have changed\n\tif (String(output) != String(this.storetiddler.getFieldString(this.storeField))) {\n\t\tthis.refreshSelf();\n\t\treturn true;\n\t} else if(this.stateTitle && changedTiddlers[this.stateTitle]) {\n\t\tthis.readState();\n\t\treturn true;\n\t}\n\treturn false;\n};\n\nActionSumFieldWidget.prototype.getTiddlerList = function() {\n\tvar defaultFilter = \"[!is[system]is[system]]\"; // this will always return an empty list and is always valid, so default behavior is to return an empty list\n\treturn this.wiki.filterTiddlers(this.getAttribute(\"$filter\",defaultFilter),this);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nActionSumFieldWidget.prototype.invokeAction = function(triggeringWidget,event) {\n\tif (this.output === String(this.storetiddler.getFieldString(this.storeField))) {\n\t} else {\n\t  this.wiki.setText(this.actionTiddler,this.storeField,this.storeIndex,this.output);\n\t}\n\treturn true; // Action was invoked\n};\n\nexports[\"action-sumfield\"] = ActionSumFieldWidget;\n\n})();\n",
            "title": "$:/plugins/inymsocks/MathyThing/action-sumfield.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/inymsocks/MathyThing/action-sumfield2.js": {
            "text": "/*\\\ntitle: $:/plugins/inymsocks/MathyThing/action-sumfield2.js\ntype: application/javascript\nmodule-type: widget\n\nAdd the values in two specified fields and store the result in another field\n\n<$sumfield2 filter='[tag[sum]]' sumfield='sum_field' sumfield2='sum_field2' storefield='store_field'/>\n\nThis is an edited version of the list widget from TiddlyWiki5\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar ActionSumFieldWidget2 = function(parseTreeNode,options) {\n\t// Main initialisation inherited from widget.js\n\tthis.initialise(parseTreeNode,options);\n};\n\n/*\nInherit from the base widget class\n*/\nActionSumFieldWidget2.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\nActionSumFieldWidget2.prototype.render = function(parent,nextSibling) {\n\tthis.computeAttributes();\n\tthis.execute();\n};\n\n/*\nCompute the internal state of the widget\n*/\nActionSumFieldWidget2.prototype.execute = function() {\n\t// Get attributes\n\tthis.actionTiddler = this.getAttribute(\"$tiddler\",0);\n\tthis.sumField = this.getAttribute(\"$sumfield\");\n\tthis.sumField2 = this.getAttribute(\"$sumfield2\");\n\tthis.storeField = this.getAttribute(\"$storefield\",\"store_field\");\n\tthis.storeIndex = this.getAttribute(\"$index\");\n\tthis.defaultValue = this.getAttribute(\"$defaultvalue\",0);\n\t// Compose the list elements\n\tthis.list = this.getTiddlerList();\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\nActionSumFieldWidget2.prototype.refresh = function(changedTiddlers) {\n\tvar changedAttributes = this.computeAttributes();\n\tthis.list = this.getTiddlerList();\n\tfor (var i = 0; i < this.list.length; i++) {\n\t\tvar output = 1;\n\t\tvar tidtitle = this.list[i];\n\t\tvar tiddler = this.wiki.getTiddler(tidtitle);\n\t\tif ( !isNaN(parseFloat(tiddler.getFieldString(this.sumField))) && isFinite(tiddler.getFieldString(this.sumField)) && !isNaN(parseFloat(tiddler.getFieldString(this.sumField2))) && isFinite(tiddler.getFieldString(this.sumField2)) ) {\n\t  \t\toutput = Number(tiddler.getFieldString(this.sumField)) + Number(tiddler.getFieldString(this.sumField2));\n\t\t}\n\t\t// Completely rerender if any of our attributes have changed\n\t\tif ( this.actionTiddler === 0 ) {\n\t\t\tif (String(output) != String(tiddler.getFieldString(this.storeField))) {\n\t\t\t\tthis.refreshSelf();\n\t\t\t\treturn true;\n\t\t\t} else if(this.stateTitle && changedTiddlers[this.stateTitle]) {\n\t\t\t\tthis.readState();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tvar tiddler2 = this.wiki.getTiddler(this.actionTiddler);\n\t\t\tif (String(output) != String(tiddler2.getFieldString(this.storeField))) {\n\t\t\t\tthis.refreshSelf();\n\t\t\t\treturn true;\n\t\t\t} else if(this.stateTitle && changedTiddlers[this.stateTitle]) {\n\t\t\t\tthis.readState();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\nActionSumFieldWidget2.prototype.getTiddlerList = function() {\n\tvar defaultFilter = \"[!is[system]is[system]]\"; // this will always return an empty list and is always valid, so default behavior is to return an empty list\n\treturn this.wiki.filterTiddlers(this.getAttribute(\"$filter\",defaultFilter),this);\n};\n\n/*\nInvoke the action associated with this widget\n*/\nActionSumFieldWidget2.prototype.invokeAction = function(triggeringWidget,event) {\n\t// Check for an empty list, if the list isn't empty compute the sum\n\tif(this.list.length === 0) {\n\t\toutput = this.defaultValue; //return the default value when there is nothing to sum, if it isn't set than return 0\n\t} else {\n\t\tfor (var i = 0; i < this.list.length; i++) {\n\t\t\tvar output = 1;\n\t\t\tvar tidtitle = this.list[i];\n\t\t\tvar tiddler = this.wiki.getTiddler(tidtitle);\n\t\t\t// check to make sure that the field contains a number before using it in the sum\n\t\t\tif ( !isNaN(parseFloat(tiddler.getFieldString(this.sumField))) && isFinite(tiddler.getFieldString(this.sumField)) && !isNaN(parseFloat(tiddler.getFieldString(this.sumField2))) && isFinite(tiddler.getFieldString(this.sumField2)) ) {\n\t\t\t\toutput = Number(tiddler.getFieldString(this.sumField)) + Number(tiddler.getFieldString(this.sumField2));\n\t\t\t}\n\t\t\t // If the sum has changed then write to the field\n\t\t\tthis.output = String(output);\n\t\t\tif ( this.actionTiddler === 0 ) {\n\t\t\t\tif (this.output === String(tiddler.getFieldString(this.storeField))) {\n\t\t\t\t} else {\n\t\t\t\t\t\tthis.wiki.setText(tidtitle,this.storeField,this.storeIndex,this.output);\n\t\t\t\t} \n\t\t\t} else {\n\t\t\t\tvar tiddler2 = this.wiki.getTiddler(this.actionTiddler);\n\t\t\t\tif (this.output === String(tiddler2.getFieldString(this.storeField))) {\n\t\t\t\t} else {\n\t\t\t\t\tthis.wiki.setText(this.actionTiddler,this.storeField,this.storeIndex,this.output);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true; // Action was invoked\n};\n\nexports[\"action-sumfield2\"] = ActionSumFieldWidget2;\n\n})();\n",
            "title": "$:/plugins/inymsocks/MathyThing/action-sumfield2.js",
            "type": "application/javascript",
            "module-type": "widget"
        },
        "$:/plugins/inmysocks/MathyThing/readme": {
            "title": "$:/plugins/inmysocks/MathyThing/readme",
            "type": "text/vnd.tiddlywiki",
            "text": "!TW5-MathyThing\n\n\na math plugin for TiddlyWiki5\n\nCurrently this plugin contains:\n\n*The action-storecount widget\n*The action-increment widget\n*The action-sumfield widget\n*The action-sumfield2 widget\n*The action-prodfield widget\n*The action-prodfield2 widget\n\n---\n\n''The action-storecount widget'' - an action widget with similar functionality to the count widget. It takes a filter and will count the number of matching tiddlers and, on a button press or other initiating event, store the output in the designated field. It was created by combining the action-setfield and count widgets.\n\nUsage:\n\n`<$action-storecount $filter=<<someFilter>> $tiddler=someTiddler $field=someField/>`\n\nSince it is a modification of the action-setfield widget and I haven't modifed this part, you may be able to store the output at the given index of a data tiddler, but I haven't tested that yet.\n\n---\n\n''The action-increment widget'' - a widget that increments a value in a field by a given amount\n\nNote: Both the field and the increment value have to be numeric and exist. If you specifiy an empty field, or a field with a non-numeric value, than the widget won't do anything. The prefix string doesn't count toward as 'non-numeric' for this.\n\nUsage:\n\n`<$action-increment $tiddler=someTiddler $field=fieldToIncrement $increment=incrementValue $length=zeroPadLength $prefix=outputPrefix $intial=initialValue/>`\n\n*$tiddler defaults to `<<currentTiddler>>`\n*$field defaults to make_sure_you_give_a_field_parameter\n*$increment defaults to 1\n*$length has no default, if no length is given than the output will have no zero padding\n*$prefix has no default, if no prefix is given the output isn't given a prefix\n*$initial defaults to 0\n\nNote: the `$length` input specifies the minimum length, so if your `$length` is set to 1 and your stored value is 10 the `$length` input does nothing. The `$length` is also independent of the `$prefix`.\n\nIt will take the value of someField and replace it with the value someField+someIncrement\n\nThere is no requirement that either value be positive or an integer.\n\n---\n\n\n''The action-storecount widget'' - a widget with similar functionality to the count widget. It takes a filter and will count the number of matching tiddlers and store the output in the designated field. It was created by modifying the sumfield widget below.\n\nUsage:\n\n`<$action-storecount $filter=<<someFilter>> $tiddler=someTiddler $field=someField/>`\n\nSince it is a modification of the action-setfield widget and I haven't modifed this part, you may be able to store the output at the given index of a data tiddler, but I haven't tested that yet.\n\n---\n\n\n''The sumfield widget'' - a widget that was made by modifying the list widget. It takes a filter and a given field and sums together everything in that field in the filtered tiddlers.\n\nUsage:\n\n`<$action-sumfield $filter=<<someFilter>> $sumfield=sumField $tiddler=storeTiddler $storefield=storeField $defaultvalue=defaultValue/>`\n\nIt will take each tiddler listed when using `<<someFilter>>` and take the value in sumField from each of the tiddlers and sum them, the result will be placed in the storeField of the tiddler storeTiddler. If there aren't any numbers to sum than it will display defaultValue.\n\ntiddler defaults to `<<currentTiddler>>` and defaultValue defaults to 0 if they aren't given inputs.\n\nIf one of the fields contains a non-numeric value than it is ignored. This includes empty fields.\n\n---\n\n\n''The action-sumfield2 widget'' - a widget that was made by modifying the list widget. It takes a filter and a given field and sums together two fields in the filtered tiddlers and stores the value in a third field.\n\nUsage:\n\n`<$action-sumfield2 $filter=<<someFilter>> $sumfield=sumField $sumfield2=sumField2 $storefield=storeField $defaultvalue=defaultValue/>`\n\nIt will take each tiddler listed when using `<<someFilter>>` and take the value in sumField to the value in sumField2 in each of the tiddlers and the result will be placed in the storeField of each tiddler. If there aren't any numbers to sum than it will display defaultValue.\n\ntiddler defaults to `<<currentTiddler>>` and defaultValue defaults to 0 if they aren't given inputs.\n\nIf one of the fields contains a non-numeric value than it is ignored. This includes empty fields.\n\n---\n\n\n''The action-prodfield widget'' - a widget that was made by modifying the list widget. It takes a filter and a given field and takes the product of everything in that field in the filtered tiddlers.\n\nUsage:\n\n`<$action-prodfield $filter=<<someFilter>> $prodfield=prodField $tiddler=storeTiddler $storefield=storeField $defaultvalue=defaultValue/>`\n\nIt will take each tiddler listed when using `<<someFilter>>` and take the value in prodField from each of the tiddlers and take their product, the result will be placed in the storeField of the tiddler storeTiddler. If there aren't any numbers to sum than it will display defaultValue. \n\ntiddler defaults to `<<currentTiddler>>` and defaultValue defaults to 0 if they aren't given inputs.\n\nIf one of the fields contains a non-numeric value than it is ignored. This includes empty fields.\n\n---\n\n\n''The action-prodfield2 widget'' - a widget that was made by modifying the list widget. It takes a filter and a given two fields takes the product of those fields in the filtered tiddlers, then stores the result in a third field in each tiddler.\n\nUsage:\n\n`<$action-prodfield2 $filter=<<someFilter>> $prodfield=prodField $prodfield2=prodField2 $storefield=storeField $defaultvalue=defaultValue/>`\n\nIt will take each tiddler listed when using `<<someFilter>>` and multiply the values in prodField and prodField2 in each of the tiddlers and the result will be placed in the storeField of each tiddler. If there aren't any numbers to sum than it will display defaultValue. \n\ntiddler defaults to `<<currentTiddler>>` and defaultValue defaults to 0 if they aren't given inputs.\n\nIf one of the fields contains a non-numeric value than it is ignored. This includes empty fields."
        }
    }
}